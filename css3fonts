#!/bin/bash

#########################################################################
# CSS3 @font-face Converter v3
# by Zoltan Hawryluk (http://www.useragentman.com)
# updated by Brian Gundlach (http://mrkt.ga/C)
# More info available at http://mrkt.ga/F2
#########################################################################

#########################################################################
## CONFIGURATION AREA: This stuff is the only stuff you may need to     #
##                     change.                                          #
#########################################################################

# The path should contain the directories where ttf2eot,
# fontforge, ttfautohint and all the scripts in the @Font-Face Contruction Set reside.
# Uncomment the line below with the right directories.  Remember the 
# $PATH at the beginning of the string, or the script will forget what
# was originally in the PATH.
# PATH="$PATH:~/bin/"

#########################################################################
# OPTIONS                                                               #
#########################################################################
# NOTE: This requires GNU getopt.  On Mac OS X and FreeBSD, you have to install this SEPARATELY
# set default flags
SHOW_FEATURES="0"
CLEANUP="0"
SHOW_HELP="0"
USE_FONT_STRETCH="0"
USE_FONT_WEIGHT="0"
DO_AUTOHINT="0"
DO_COMPRESS="0"
STYLESHEETFILE='c3f.css'
# read the options
TEMP=`getopt -o chwsfHm::o:p: --long show-features,clean,help,autohint,minify::,output:,prefix:,stretch,weight -n 'css3fonts' -- "$@"`
eval set -- "$TEMP"

# extract options and their arguments into variables.
while true ; do
    case "$1" in
        -m|--minify)
            case "$2" in
                "") DO_COMPRESS="1" ; shift 2 ;;
                *) DO_COMPRESS="$2" ; shift 2 ;;
            esac ;;
        -o|--output) STYLESHEETFILE="$2" ; shift 2 ;;
        -p|--prefix) FONT_PREFIX="$2" ; shift 2 ;;
        -c|--clean) CLEANUP="1" ; shift ;;
        -w|--weight) USE_FONT_WEIGHT="1" ; shift ;;
        -h|--help) SHOW_HELP="1" ; shift ;;
        -s|--stretch) USE_FONT_STRETCH="1" ; shift ;;
        -f|--show-features) SHOW_FEATURES="1" ; shift ;;
        -H|--autohint) DO_AUTOHINT="1" ; shift ;;
        --) shift ; break ;;
        *) echo "$1 is an Invalid argument!" ; exit 1 ;;
    esac
done
ARGS=`echo $* | tr ' ' '
'`
echo $FONT_PREFIX

ARGS=`echo "$ARGS" | grep -v '\--'`

#.. is 0 if has this binary, non-zero otherwise 
HAS_WOFF2_COMPRESS=`which 'woff2_compress' > /dev/null; echo $?`

if [ "$FONT_PREFIX" = "" -a "$DO_AUTOHINT" != "0" ] 
then
	FONT_PREFIX="hinted-"
fi
if [ "$FONT_PREFIX" = "" -a "$DO_COMPRESS" != "0" ] 
then
	if [ "$DO_COMPRESS" == "1" ]
	then
	FONT_PREFIX="en-"
else
	FONT_PREFIX="h1-"
fi
fi

#.. Before we do anything else -- make sure the args are all real files.  If one
#   of them isn't, bail, since we don't want the output to be something 
#   unexpected and BAD.


if [ "$ARGS" = "" -a "$CLEANUP" = "0" -a "$SHOW_HELP" = "0" ]
then
	echo
	echo "No arguments.  Bailing."
	echo
	echo "Try '$0 --help' for instructions."
	echo
	exit 30
fi

for i in $ARGS
do
	if [ ! -f $i ]
	then
		echo "One of the files you want to convert ($i) is not
a file.  Bailing." 1>&2
  	exit 40
	fi
done

if [ "$HAS_WOFF2_COMPRESS" != "0" ]
then
	echo "

**********************************************************************************
*
* NOTE: You either don't have woff2_compress installed on your machine
* or it is not in your path.  If you want WOFF2 support, please install this
* application.  Details on doing this available at:
* 
* http://code.google.com/p/font-compression-reference/w/list
*
* (Click on the \"gathering_compression_improvement_numbers\" link).
*
* Not having WOFF2 support is not a show stopper, so we will continue converting 
* your fonts, but you can save 30-50% on a font download with browsers that do
* support it, so it is highly recommended.
*
**********************************************************************************

"
fi 
#########################################################################
## PROGRAM AREA                                                         #
#########################################################################

#.. check for fontforge
FONTFORGE_EXT=""
FONTFORGE=`which fontforge 2> /dev/null`
if [ "$?" != "0" ]
then 
	FONTFORGE_EXT="bat"
	FONTFORGE=`which fontforge.bat 2> /dev/null`
	
	if [ "$?" != "0" ]
	then
		echo "Error: FontForge is not installed. Bailing" 1>&2
		exit 5
	fi
fi

SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  TARGET="$(readlink "$SOURCE")"
  if [[ $SOURCE == /* ]]; then
    SOURCE="$TARGET"
  else
    SCRIPT_DIR="$( dirname "$SOURCE" )"
    SOURCE="$SCRIPT_DIR/$TARGET" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
  fi
done
SCRIPT_DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
IFS=$(echo -en "\n\b")


if [ "$SHOW_HELP" != "0" ]
then
  echo "
CSS3 Font Converter by Brian Gundlach.
Released under the WTFPL 3.0, 2015.

Usage: $0 [-options] [fontfilelist]

Where: - [fontfilelist] is a space separated list of ttf otf woff2 woff fonts.
         
       - [-options] are one of the following:

-m --minify[=<string>]  limits the font to <string> or A-z,0-9 and punctuation
-w --weight             merge font-weights and styles under same font name
-s --stretch            merge condensed and expanded fonts under same font name
-H --autohint           hint fonts
-p --prefix=<prefix>    prepend the name of all the fonts with this string
-o --output=<filename>  the default output file is c3f.css
-f --show-features      display a list of OpenType feature tags a font supports
-h --help               this help menu.
  
This script can run on any version of linux running bash and is designed to 
also run under Windows using Cygwin. Installation instructions and more 
information can be found at http://github.com/BGundlach/css3fonts or 
http://mrkt.ga/F2

BSD derivitives (looking at you mac) may need to install the linux getopt 
for this script to work properly.
"
  exit 1

#.. if --show-features is set, then we just open the font file and show what
#   font feautres are supported by the font
elif [ "$SHOW_FEATURES" != "0" ]
then
  for i in $ARGS
  do
		echo
		echo "Font: $i"
		# echo -n "Vendor: "
		# $FONTFORGE -script 'showVendor.pe'
		$FONTFORGE -script $SCRIPT_DIR/tableSupport.pe $i 2> /dev/null | 
			sed "s/\[//g; s/\]//g;" | tr ',' '
'
		
  done
  
  echo 
	echo "Information on these features can be found at these URLS: "
	echo "  - http://www.microsoft.com/typography/otspec/featurelist.htm"
	echo "  - http://partners.adobe.com/public/developer/opentype/index_tag3.html"
	echo
	exit 0

		

#.. if the clean option is set, let's get rid of all files this
#   script may have created.
elif [ "$CLEANUP" != "0" ]
then

  echo "
WARNING!  This will remove all non TTF and OTF fonts,
as well as hinted fonts and css stylesheets, in this directory.
Are you *sure* you want to do this [y/N]?"
  read ANS
  
  if [ "$ANS" = "y" -o "$ANS" = "Y" ]
  then
    echo "Removing files."
    rm -r *.eot *.svg *.woff *.woff2  old *.css hinted-*.ttf 2> /dev/null
    
   
    
    echo "DONE"
    exit 20
  else 
    exit 21
  fi 


#.. if the filelist contains any files prefixed with 'hinted-' and the 
#   --autohint option is set, give an error and exit immediately.
elif [ "$DO_AUTOHINT" != "0" ]
then
  HINTED_FILES=`echo "$ARGS" | egrep "^hinted-"`
  
  if [ "$HINTED_FILES" != "" ]
  then
    echo "ERROR: Attempting to autohint already hinted files. You 
should only try to autohint files that haven't been hinted already.
You should try to clean this directory by running this script with
the --clean option.  See --help for more details.  Bailing. " 1>&2
    exit 10
  fi
 

fi 

#.. converts a font to TTF
toTTF () {
	if [ "$IS_WOFF" = "0" ]
	then
		woff2sfnt $i > "$FILE_STUB".otf
		i="$FILE_STUB".otf
		IS_OTF="0"
	fi
	if [ "$IS_OTF" = "0" ]
	then
		if [ "$FONTFORGE_EXT" = "bat" ]
		then
			echo "(Using MingW FontForge)"
			$FONTFORGE -script `cygpath -w $SCRIPT_DIR/2ttf.pe` \
			`cygpath -w $i` 2> /dev/null
		else
			echo "(Using Cygwin or Unix FontForge)"
			$FONTFORGE -script $SCRIPT_DIR/2ttf.pe $i 
		fi
	elif [ "$IS_WOFF2" = "0" ]
	then
		woff2_decompress $i
		i="$FILE_STUB".ttf
		IS_TTF="0"
	fi
	
}

minify () {
	if [ "$DO_COMPRESS" == "1" ]
	then
		$FONTFORGE -script $SCRIPT_DIR/minify.pe $i $FONT_PREFIX
	else
		TEXT_STRING="$DO_COMPRESS"
		LIST=()
		while [ ${#TEXT_STRING} -ge 1 ]; do
			RVSED=`echo "$TEXT_STRING" | iconv -t unicode | hexdump -ve '/1 "%02x"' | head -c 8 | tail -c 4`
			BYTE1=`printf $RVSED|tail -c2`
			BYTE2=`printf $RVSED|head -c2`
			CHAR=u$BYTE1$BYTE2
			LIST+=($CHAR)
			TEXT_STRING=`echo $TEXT_STRING|tail -c +2`
		done
		CHARS=($(printf '%s\n' "${LIST[@]}"|sort -u))
		$FONTFORGE -script $SCRIPT_DIR/text.pe $i $FONT_PREFIX ${CHARS[@]}
	fi
	i=$FONT_PREFIX$i
} 

#.. converts a font to EOT format.  Uses EOTFAST if possible, fallbacks
#   to TTF2EOT otherwise.  Note that that TTF2EOT is used if EOTFAST is
#   not installed, or if EOTFAST fails (which sometimes happens).

toEOT () {
	which 'EOTFAST-1' > /dev/null
	FOUND="$?"
	
		
	if [ "$FOUND" = "0" -a  "$USE_TTF2EOT" =	"" ]
	then
		echo "(Using EOTFAST)"
		EOTFAST-1 $1 $FILE_STUB.eot
		SUCCESS="$?"
	
		if [ "$SUCCESS" != "0" ]
		then
			echo "EOTFAST failed.  Using ttf2eot instead"
		fi
	fi
	
	
	if [ "$FOUND" != "0" -o "$SUCCESS" != "0" -o "$USE_TTF2EOT" != "" ]
	then
		echo "(Using ttf2eot)"
		FILE_STUB=`echo $NEW_FILE |
			sed "s/\.[tT][tT][fF]$//" |
			sed "s/\.[oO][tT][fF]$//"`
		ttf2eot $1 > $FILE_STUB.eot
	fi
}

#.. converts a font to SVG.  Perhaps we should remove the BATIK
#   dependency.
toSVG() {
	if [ -f $SCRIPT_DIR/2svg.pe ]
	then
		fontforge -script $SCRIPT_DIR/2svg.pe $1 2> /dev/null
	else 
		echo "Error: cannot produce SVG font"
	fi
}

#.. This gets the font name.  Used when not using the 
#   --use-font-weight option.
getFontName () { 

  
	if [ "$FONTFORGE_EXT" = "bat" ]
	then
		$FONTFORGE -script `cygpath -w $SCRIPT_DIR/getFontName.pe` \
			`cygpath $1` 2> /dev/null | tr ' ' '_'  |
			sed "s/
//g" 
	else
		fontforge -script $SCRIPT_DIR/getFontName.pe $1 2> /dev/null | tr ' ' '_' 
	fi
}





getSVGID () {
	grep "id=" $1 | tr ' ' '
' | grep ^id | awk -F'"' '{print $2}'
}

toWOFF () {
	sfnt2woff $1
}

toWOFF2 () {
	if [ "$HAS_WOFF2_COMPRESS" = "0" ]
	then
		woff2_compress $1
	fi
}

#.. This sets some (ugh) global variables with information about a font from
#   fontforge.
getFontInfo() {
	OUT=`fontforge -script $SCRIPT_DIR/getFontInfo.pe $1 2> /dev/null`
	
	INFO_WEIGHT=`echo "$OUT" | egrep "^Weight:"` 
	INFO_FONTNAME=`echo "$OUT" | egrep "^Font name:"`
	INFO_FULLNAME=`echo "$OUT" | egrep "^Full name:"`
	INFO_ITALICANGLE=`echo "$OUT" | egrep "^Italic angle:"`
}

#.. isWeightStyle() takes one parameter that can be one of the following:
#      
#     Bold, Italic, Condensed, Narrow
#
#   the function will return T if it is of the type passed, F otherwise.

isWeightStyle () {
	STYLE=`echo $1 | sed 's/ /\[ _-\]/g'`
	R="F" 
	
	echo "$INFO_WEIGHT" | grep -i "$STYLE" > /dev/null
	
	if [ "$?" = "0" ]
	then
		R="T"
		else
		echo "$INFO_FULLNAME" | grep -i "$STYLE" > /dev/null
		if [ "$?" = "0" ]
		then
			R="T"
		else 
	
			echo "$INFO_FONTNAME" | grep -i "$STYLE" > /dev/null
	
			if [ "$?" = "0" ]
			then
				R="T"
			fi
		fi
	fi

	#.. if we are testing for italic and the answer is F so far, check the 
	#   italic angle
	if [ "$R" = "F" -a "$STYLE" = "italic" ]
	then
		ANGLE=`echo "$INFO_ITALICANGLE" | awk -F": " '{print $2}'`
		
		if [ "$ANGLE" != "0" ]
		then
			R="T"
		fi
	fi
	echo $R
}

#.. doautohint() -- takes 1 parameter ($1) which is file that is to be hinted.
#   This function will write the hinted font to the same file name with the
#   prefix '$FONT_PREFIX'.  

doautohint() {

	if [ "$AUTOHINTER" = "ttfautohint" ]
	then
		#
		# These are the best options after fiddling around with this a lot.
		# Note that as of 0.96, the option "--components" has been replaced 
		# by "--composites". 
		# http://sourceforge.net/projects/freetype/files/ttfautohint/0.96/
		# 
		# Thanks to github user "pep-" for pointing this out.
		#

		if [ "$TTFAUTOHINT_096_HIGHER" = "T" ] 
		then 
			COMP='--composites'
		else 
			COMP='--components'
		fi

		ttfautohint  --strong-stem-width="" --windows-compatibility $COMP $1 $FONT_PREFIX$1
	else
		#.. The adobe autohinter spews out a lot of junk.  For now, hide it.
		autohint -q -o $FONT_PREFIX$1 $1 2> /dev/null | grep -iv error | grep -v "^." | grep -v "^$"
	fi 
}



if [ "$#" -eq "0" ]
then
	echo "Usage: $0 <font list>" 1>&2
	exit 1
fi

# .. check to make sure all packages are installed
for i in sfnt2woff java 
do
	which "$i" > /dev/null 2> /dev/null
	if [ "$?" != "0" ]
	then
		echo "Error: Package $i is not installed.  Bailing" 1>&2
		exit 2
	fi
done

# .. check for ttfautohint is installed if --autohint option is set
if [ "$DO_AUTOHINT" != "0" ]
then
	which ttfautohint > /dev/null 2> /dev/null
	if [ "$?" != "0" ]
	then
		echo "Error: Package ttfautohint is not installed. You cannot use the 
	--autohint option without it.  Bailing.
	" 1>&2
		exit 2
	else
		#.. We will now check for the version.
		TTFAUTOHINT_096_HIGHER=`ttfautohint --version |
			grep ttfautohint | 
			awk '{if ($2 >= 0.96) { 
				print "T" 
			} else { 
				print "F"
			} 
			}'`
		
		echo -n "Using version of ttfautohint >=0.96? "
		echo $TTFAUTOHINT_096_HIGHER
	fi
fi 

	


#.. checks for binaries that convert to EOT format.
HAS_EOT_SUPPORT=1
for i in EOTFAST-1 ttf2eot 
do
	which "$i" > /dev/null 2> /dev/null
	HAS_EOT_SUPPORT=`expr $? \* $HAS_EOT_SUPPORT`
done

if [ "$HAS_EOT_SUPPORT" = "1" ]
then
	echo "Error: EOTFAST and/or ttf2eot is not installed. Bailing." 1>&2
	exit 4
fi

if [ -d old ]
then
	mkdir old
fi

#.. for each font, we create an @font-face rule.
for i in $ARGS
do
	
	#.. check to see if it's a TrueType font
	file "$i" | grep "TrueType" > /dev/null
	IS_TTF="$?"

	file "$i" | grep "Spline Font Database" > /dev/null
	IS_SFD="$?"
	
	file "$i" | grep "OpenType" > /dev/null
	IS_OTF="$?"

	cat "$i" | head -c 10 | grep "wOFF" > /dev/null
	IS_WOFF="$?"

	cat "$i" | head -c 10 | grep "wOF2" > /dev/null
	IS_WOFF2="$?"

	if [ "$IS_OTF" = "0" ]
	then
		ORIG_TYPE="otf"
		
	elif [ "$IS_TTF" = "0" ]
	then
		ORIG_TYPE="ttf"
	elif [ "$IS_WOFF" = "0" ]
	then
		ORIG_TYPE="woff"
	elif [ "$IS_WOFF2" = "0" ]
	then
		ORIG_TYPE="woff2"
	fi
	
	if [ "$DO_AUTOHINT" != "0" -a \
			\( \( "$ORIG_TYPE" = "ttf" -a "$AUTOHINTER" = "autohint" \) -o \
			\( "$ORIG_TYPE" = "woff" -o "$ORIG_TYPE" = "woff2" \) -o \
			\( "$ORIG_TYPE" = "otf" -a "$AUTOHINTER" = "ttfautohint" \) \) ]
		then
			echo "Error!  Cannot use $AUTOHINTER on $ORIG_TYPE fonts.  Bailing" 1>&2
			exit 30
		fi
	
	

	if [ "$IS_OTF" = 0 -o "$IS_TTF" = 0 -o "$IS_WOFF" = 0 -o "$IS_WOFF2" = 0 -o "$IS_SFD" = 0 ]
	then
		    
		cp $i old
	
		NEW_FILE=`echo $i | sed "s/ /_/g; s/TTF$/ttf/; s/OTF$/otf/; s/WOFF$/woff/; s/WOFF2$/woff2/"`

		if [ "$i" != "$NEW_FILE" ]
		then
			echo "Removing spaces in font name."
			mv $i $NEW_FILE
			i="$NEW_FILE"
		fi

		if [ "$FONT_PREFIX" != "" -a $DO_COMPRESS == "0" -a $DO_AUTOHINT == "0" ]
		then
		NEW_FILE=$FONT_PREFIX$NEW_FILE
		NEW_FILE=`echo $NEW_FILE | sed "s/ /_/g;"
		mv $i $NEW_FILE
		i="$NEW_FILE"
		fi
	
		FILE_STUB=`echo $NEW_FILE | 
			sed "s/\.[to]tf$//; s/\.woff$//; s/\.woff2$//"`

		echo $FILE_STUB

		#.. If this is an OTF, WOFF or WOFF2 Font, then convert it to TTF.  

		if [ "$IS_TTF" != "0" ]
		then 
		
			if [ ! -f $FILE_STUB.ttf ]
			then
				toTTF $NEW_FILE
			fi
			NEW_FILE="$FILE_STUB.ttf"
		fi
		
		if [ "$DO_COMPRESS" != "0" ]
		then
			echo "compressing file"
		 	minify
			FILE_STUB="$FONT_PREFIX$FILE_STUB"
			NEW_FILE="$FONT_PREFIX$NEW_FILE"
		fi

		#.. If --autohint option is set, we must hint
		#   this file with ttfautohint
		if [ "$DO_AUTOHINT" != "0" ]
		then
		
			echo "Hinting $NEW_FILE ..."
			doautohint $NEW_FILE
			FILE_STUB="$FONT_PREFIX$FILE_STUB"
			NEW_FILE="$FONT_PREFIX$NEW_FILE"
		fi
		
		

		if [ ! -f $FILE_STUB.eot ]
		then
			echo "Converting $FILE_STUB to eot ($NEW_FILE)"
			toEOT $NEW_FILE 
		else 
			echo "$FILE_STUB.eot exists, skipping ..."
		fi
	
		#.. do not convert a font to svg format if we are using
		#   --use-font-weight, since several SVG declarations of
		#   the same font will not work in iOS < 4.2.
		if [ "$USE_FONT_WEIGHT" = "0" ]
		then
		
			if [ ! -f $FILE_STUB.svg ]
			then
				echo "Converting $FILE_STUB to svg"
				toSVG $NEW_FILE $FILE_STUB
			else 
				echo "$FILE_STUB.svg exists, skipping ..."
			fi
			
	fi
	
		if [ ! -f $FILE_STUB.woff ]
		then
			# NOTE: we use $i instead of $NEW_FILE, since woff is
			# just a wrapper for OTF and TTF.  Having the original
			# OTF is better here, unless we are autohinting.
			if [ "$DO_AUTOHINT" != "0" ]
			then
				echo "Converting $FILE_STUB to woff from converted TTF"
				toWOFF $NEW_FILE
			else
				echo "Converting $FILE_STUB to woff from $i."
				toWOFF $i
			fi
		else 
			echo "$FILE_STUB.woff exists, skipping ..."
		fi
				
		if [ ! -f $FILE_STUB.woff2 -a "$HAS_WOFF2_COMPRESS" == "0" ]
		then
			# NOTE: we use $i instead of $NEW_FILE, since woff2 is
			# just a wrapper for OTF and TTF.  Having the original
			# OTF is better here, unless we are autohinting.
			if [ "$DO_AUTOHINT" = "0" ]
			then
				echo "Converting $FILE_STUB to woff2 from $i."
				toWOFF2 $i
			fi

			if [ "$?" != "0" -o "$DO_AUTOHINT" != "0" ]
			then
				echo "Converting $FILE_STUB to woff2 from converted TTF ($NEW_FILE)"
				toWOFF2 $NEW_FILE
			fi
		else 
			echo "$FILE_STUB.woff2 exists, skipping ..."
		fi

	
		FILE_STUBS="$FILE_STUBS $FILE_STUB"
	else 
		echo "File $i is not a TrueType or OpenType font. Skipping"
	fi
done


echo "Writing Stylesheet ..."

COMMENT=\
"/*
 * This stylesheet generated by the CSS3 @font-face generator v3.0
 * by Brian Gundlach (http://mrkt.ga/C). 
 * Latest version of this program is available at
 * https://github.com/BGundlach/css3fonts
 */
" 

echo "$COMMENT" > $STYLESHEETFILE

IFS=$(echo -en " ")

for i in $FILE_STUBS
do

	
	if [ "$USE_FONT_WEIGHT" != "0" ]
	then
		#.. first, get the info about the font from fontforge.
		getFontInfo $i
		
		#.. next, from the fontforge info, find out if the font is bold, italic and/or condensed.
		IS_BOLD=`isWeightStyle 'bold'`
		IS_BLACK=`isWeightStyle 'black'`
		IS_LIGHT=`isWeightStyle 'light'`
		IS_MEDIUM=`isWeightStyle 'medium'`
		IS_THIN=`isWeightStyle 'thin'`
		IS_EXTRA_LIGHT=`isWeightStyle 'extra light'`
		IS_DEMI_BOLD=`isWeightStyle 'demi bold'`
		IS_EXTRA_BOLD=`isWeightStyle 'extra bold'`
		
		IS_ITALIC=`isWeightStyle 'italic'`
		
		IS_CONDENSED=`isWeightStyle 'condensed'`
		IS_EXPANDED=`isWeightStyle 'expanded'`
		
		#.. condensed and narrow are the same (I believe).
		if [ "$IS_CONDENSED" = "F" ]
		then
			IS_CONDENSED=`isWeightStyle 'narrow'`
		fi
		
		#.. set variables that will be used in the @font-face declaration
		#   These values were grabbed from the article at
		#   http://destination-code.blogspot.ca/2009/01/font-weight-number-keywords-100-900.html
		if [ "$IS_THIN" = "T" ]
		then
			FONT_WEIGHT="100";
		elif [ "$IS_EXTRA_LIGHT" = "T" ]
		then
			FONT_WEIGHT="200";
		elif [ "$IS_LIGHT" = "T" ]
		then
			FONT_WEIGHT="300";
		elif [ "$IS_BOLD" = "T" ]
		then
			FONT_WEIGHT="700";
		elif [ "$IS_MEDIUM" = "T" ]
		then
			FONT_WEIGHT="500";
		elif [ "$IS_DEMI_BOLD" = "T" ]
		then
			FONT_WEIGHT="600";
		elif [ "$IS_EXTRA_BOLD" = "T" ]
		then
			FONT_WEIGHT="800";
		
		elif [ "$IS_BLACK" = "T" ]
		then
			FONT_WEIGHT="900"
		else
			FONT_WEIGHT="400";
		fi
		
		if [ "$IS_ITALIC" = "T" ]
		then
			FONT_STYLE="italic";
		else
			FONT_STYLE="normal";
		fi
		
		if [ "$USE_FONT_STRETCH" != "0" ]
		then
			if [ "$IS_CONDENSED" = "T" ]
			then
			  FONT_STRETCH="condensed";
			elif [ "$IS_EXPANDED" = "T" ]
			then
			  FONT_STRETCH="expanded";
			else
			  FONT_STRETCH="normal";
			fi
		fi
		
		
		#.. the name we will refer to in CSS will be without the words "Bold", "Italic", etc.
		#   NOTE: I Wanted to use sed with the 'gi' options, but OSX's sed (BSD
		#	I assume) doesn't do the 'i' case insensitive switch. Boo!
		FONTNAME_SED_OPTIONS="s/[bB][oO][lL][dD]//g;
			s/[iI][tT][aA][lL][iI][cC]//g;
			s/[lL][iI][gG][hH][tT]//g;
			s/[rR][eE][gG][uU][lL][aA][rR]//g;
			s/[mM][eE][dD][iI][uU][mM]//g;
			s/[lL][iI][gG][hH][tT]//g;
			s/[bB][lL][aA][cC][kK]//g;
			s/[eE][xX][tT][rR][aA]//g;
			s/[dD][eE][mM][iI]//g;
			s/[rR][oO][mM][aA][nN]//g;
			s/[tT][hH][iI][nN]//g;"
		
		#.. we also remove the words "Condensed" and "Expanded" if the --use-font-stretch 
		#   option is enabled.
		
		if [ "$USE_FONT_STRETCH" != "0" ]
		then
			FONTNAME_SED_OPTIONS="$FONTNAME_SED_OPTIONS;
			   s/[cC][oO][nN][dD][eE][nN][sS][eE][dD]//g;
			   s/[nN][aA][rR][rR][oO][wW]//g;
			   s/[eE][xX][pP][aA][nN][dD][eE][dD]//g;"
		fi   
		
		#.. get rid of final "-" at the end of the font name, if it exists.
		FONTNAME_SED_OPTIONS="$FONTNAME_SED_OPTIONS
			     s/-$//"      
			     
		FONTNAME=`echo $INFO_FONTNAME | awk -F": " '{print $2}' |
			sed "$FONTNAME_SED_OPTIONS" | sed "s/[-_]*$//g"`
		FONTNAME="$FONT_PREFIX$FILE_STUB"
		echo -n "Font: $FONTNAME"
		
		if [ "$FONT_STRETCH" != "normal" -a  "$FONT_STRETCH" != "" ]
		then
			echo -n ", stretch: $FONT_STRETCH"
		fi
		
		if [ "$FONT_WEIGHT" != "normal" -a  "$FONT_WEIGHT" != "" ]
		then
			echo -n ", weight: $FONT_WEIGHT"
		fi
		
		if [ "$FONT_STYLE" != "normal" -a  "$FONT_STYLE" != "" ]
		then
			echo -n ", style: $FONT_STYLE"
		fi
		echo
	else  
		FONTNAME="$FONT_PREFIX`getFontName $i.$ORIG_TYPE`"
		echo "Font: $FONTNAME"
	fi

	if [ "$IS_OTF" = "0" ]
	then
		EXTRA_FONT_INFO=" url('$i.otf')  format('opentype'), "
	else 
		EXTRA_FONT_INFO=""
	fi

	
  if [ "$USE_FONT_WEIGHT" != "0" ]
  then
  
  
		RULE="
@font-face {
  font-family: '$FONTNAME';
  src: url('$i.eot?') format('eot');
  src:"

if [ "$HAS_WOFF2_COMPRESS" = "0" -a -f "$i.woff" ]
then
	RULE="$RULE url('$i.woff2') format('woff2'),"
fi

RULE="$RULE url('$i.woff') format('woff'), $EXTRA_FONT_INFO url('$i.ttf')  format('truetype');
  font-weight: $FONT_WEIGHT;
  font-style: $FONT_STYLE;"
	
	
	
	if [ "$USE_FONT_STRETCH" != "0" ]
	then

		RULE="$RULE
	font-stretch: $FONT_STRETCH;"
	
	fi
	
	RULE="$RULE
}" 

  echo "$RULE" >> $STYLESHEETFILE
  else
 
		# echo "Extracting SVG ID"
		SVG_ID=`getSVGID $i.svg`
	
    RULE="
@font-face {
  font-family: '$FONTNAME';
  src: url('$i.eot?') format('eot');
  src:"
  if [ "$HAS_WOFF2_COMPRESS" = "0" -a -f "$i.woff2" ]
  then
		RULE="$RULE url('$i.woff2') format('woff2')," >> $STYLESHEETFILE
  fi

echo "$RULE url('$i.woff') format('woff'), url('$i.svg#$SVG_ID') format('svg'), $EXTRA_FONT_INFO url('$i.ttf')  format('truetype');
}" >> $STYLESHEETFILE
  fi
done
rm old
echo "DONE!"
